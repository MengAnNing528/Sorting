#include <iostream>
#include <vector>
#include <algorithm>
#include <cmath>
#include <functional>

using namespace std;

// 1. Selection Sort (сортировка выбором)
void selectionSort(vector<int>& arr) {
    int n = arr.size();
    for (int i = 0; i < n - 1; i++) {
        int minIndex = i;
        for (int j = i + 1; j < n; j++) {
            if (arr[j] < arr[minIndex]) {
                minIndex = j;
            }
        }
        swap(arr[i], arr[minIndex]);
    }
}

// 2. Bubble Sort (сортировка обменом/пузырек)
void bubbleSort(vector<int>& arr) {
    int n = arr.size();
    for (int i = 0; i < n - 1; i++) {
        bool swapped = false;
        for (int j = 0; j < n - i - 1; j++) {
            if (arr[j] > arr[j + 1]) {
                swap(arr[j], arr[j + 1]);
                swapped = true;
            }
        }
        if (!swapped) break;
    }
}

// 3. Insertion Sort (сортировка вставками)
void insertionSort(vector<int>& arr) {
    int n = arr.size();
    for (int i = 1; i < n; i++) {
        int key = arr[i];
        int j = i - 1;
        while (j >= 0 && arr[j] > key) {
            arr[j + 1] = arr[j];
            j--;
        }
        arr[j + 1] = key;
    }
}

// 4. Merge Sort (сортировка слиянием)
void merge(vector<int>& arr, int left, int mid, int right) {
    int n1 = mid - left + 1;
    int n2 = right - mid;
    
    vector<int> L(n1), R(n2);
    
    for (int i = 0; i < n1; i++)
        L[i] = arr[left + i];
    for (int j = 0; j < n2; j++)
        R[j] = arr[mid + 1 + j];
    
    int i = 0, j = 0, k = left;
    
    while (i < n1 && j < n2) {
        if (L[i] <= R[j]) {
            arr[k] = L[i];
            i++;
        } else {
            arr[k] = R[j];
            j++;
        }
        k++;
    }
    
    while (i < n1) {
        arr[k] = L[i];
        i++;
        k++;
    }
    
    while (j < n2) {
        arr[k] = R[j];
        j++;
        k++;
    }
}

void mergeSort(vector<int>& arr, int left, int right) {
    if (left >= right) return;
    
    int mid = left + (right - left) / 2;
    mergeSort(arr, left, mid);
    mergeSort(arr, mid + 1, right);
    merge(arr, left, mid, right);
}

void mergeSort(vector<int>& arr) {
    mergeSort(arr, 0, arr.size() - 1);
}

// 5. Shell Sort (сортировка Шелла)
void shellSort(vector<int>& arr) {
    int n = arr.size();
    for (int gap = n / 2; gap > 0; gap /= 2) {
        for (int i = gap; i < n; i++) {
            int temp = arr[i];
            int j;
            for (j = i; j >= gap && arr[j - gap] > temp; j -= gap) {
                arr[j] = arr[j - gap];
            }
            arr[j] = temp;
        }
    }
}

// 6. Quick Sort (быстрая сортировка)
int partition(vector<int>& arr, int low, int high) {
    int pivot = arr[high];
    int i = low - 1;
    
    for (int j = low; j < high; j++) {
        if (arr[j] <= pivot) {
            i++;
            swap(arr[i], arr[j]);
        }
    }
    swap(arr[i + 1], arr[high]);
    return i + 1;
}

void quickSort(vector<int>& arr, int low, int high) {
    if (low < high) {
        int pi = partition(arr, low, high);
        quickSort(arr, low, pi - 1);
        quickSort(arr, pi + 1, high);
    }
}

void quickSort(vector<int>& arr) {
    quickSort(arr, 0, arr.size() - 1);
}

// 7. Heap Sort (пирамидальная сортировка)
void heapify(vector<int>& arr, int n, int i) {
    int largest = i;
    int left = 2 * i + 1;
    int right = 2 * i + 2;
    
    if (left < n && arr[left] > arr[largest])
        largest = left;
    
    if (right < n && arr[right] > arr[largest])
        largest = right;
    
    if (largest != i) {
        swap(arr[i], arr[largest]);
        heapify(arr, n, largest);
    }
}

void heapSort(vector<int>& arr) {
    int n = arr.size();
    
    // Build max heap
    for (int i = n / 2 - 1; i >= 0; i--)
        heapify(arr, n, i);
    
    // Extract elements from heap
    for (int i = n - 1; i > 0; i--) {
        swap(arr[0], arr[i]);
        heapify(arr, i, 0);
    }
}

// Search Algorithms

// 8. Sequential Search (последовательный поиск)
int sequentialSearch(const vector<int>& arr, int target) {
    for (int i = 0; i < arr.size(); i++) {
        if (arr[i] == target) {
            return i;
        }
    }
    return -1;
}

// 9. Binary Search (бинарный поиск)
int binarySearch(const vector<int>& arr, int target) {
    int left = 0, right = arr.size() - 1;
    
    while (left <= right) {
        int mid = left + (right - left) / 2;
        
        if (arr[mid] == target)
            return mid;
        else if (arr[mid] < target)
            left = mid + 1;
        else
            right = mid - 1;
    }
    
    return -1;
}

// 10. Interpolation Search (интерполирующий поиск)
int interpolationSearch(const vector<int>& arr, int target) {
    int low = 0, high = arr.size() - 1;
    
    while (low <= high && target >= arr[low] && target <= arr[high]) {
        if (low == high) {
            if (arr[low] == target) return low;
            return -1;
        }
        
        // Formula for interpolation
        int pos = low + ((target - arr[low]) * (high - low)) / (arr[high] - arr[low]);
        
        if (arr[pos] == target)
            return pos;
        else if (arr[pos] < target)
            low = pos + 1;
        else
            high = pos - 1;
    }
    
    return -1;
}

// 11. Fibonacci Search (Фибоначчи поиск)
int fibonacciSearch(const vector<int>& arr, int target) {
    int n = arr.size();
    
    // Initialize Fibonacci numbers
    int fib2 = 0; // (m-2)'th Fibonacci number
    int fib1 = 1; // (m-1)'th Fibonacci number
    int fib = fib1 + fib2; // m'th Fibonacci number
    
    // Find the smallest Fibonacci number greater than or equal to n
    while (fib < n) {
        fib2 = fib1;
        fib1 = fib;
        fib = fib1 + fib2;
    }
    
    int offset = -1;
    
    while (fib > 1) {
        // Check if fib2 is a valid location
        int i = min(offset + fib2, n - 1);
        
        if (arr[i] < target) {
            fib = fib1;
            fib1 = fib2;
            fib2 = fib - fib1;
            offset = i;
        }
        else if (arr[i] > target) {
            fib = fib2;
            fib1 = fib1 - fib2;
            fib2 = fib - fib1;
        }
        else {
            return i;
        }
    }
    
    // Compare the last element
    if (fib1 && offset + 1 < n && arr[offset + 1] == target) {
        return offset + 1;
    }
    
    return -1;
}

// Utility function to print array
void printArray(const vector<int>& arr) {
    for (int num : arr) {
        cout << num << " ";
    }
    cout << endl;
}

// Test function
int main() {
    vector<int> arr = {64, 34, 25, 12, 22, 11, 90, 5};
    vector<int> testArr;
    
    cout << "Original array: ";
    printArray(arr);
    
    // Test sorting algorithms
    cout << "\n--- Sorting Algorithms ---\n";
    
    testArr = arr;
    selectionSort(testArr);
    cout << "Selection Sort: ";
    printArray(testArr);
    
    testArr = arr;
    bubbleSort(testArr);
    cout << "Bubble Sort:    ";
    printArray(testArr);
    
    testArr = arr;
    insertionSort(testArr);
    cout << "Insertion Sort: ";
    printArray(testArr);
    
    testArr = arr;
    mergeSort(testArr);
    cout << "Merge Sort:     ";
    printArray(testArr);
    
    testArr = arr;
    shellSort(testArr);
    cout << "Shell Sort:     ";
    printArray(testArr);
    
    testArr = arr;
    quickSort(testArr);
    cout << "Quick Sort:     ";
    printArray(testArr);
    
    testArr = arr;
    heapSort(testArr);
    cout << "Heap Sort:      ";
    printArray(testArr);
    
    // Test search algorithms
    cout << "\n--- Search Algorithms ---\n";
    vector<int> sortedArr = {2, 5, 8, 12, 16, 23, 38, 45, 56, 72, 91};
    int target = 23;
    
    cout << "Sorted array for searching: ";
    printArray(sortedArr);
    cout << "Target: " << target << endl;
    
    cout << "Sequential Search: " << sequentialSearch(sortedArr, target) << endl;
    cout << "Binary Search:     " << binarySearch(sortedArr, target) << endl;
    cout << "Interpolation Search: " << interpolationSearch(sortedArr, target) << endl;
    cout << "Fibonacci Search:  " << fibonacciSearch(sortedArr, target) << endl;
    
    return 0;
}
